run-name: SECRETS_TEST - ${{ github.event_name }} by @${{ github.actor }}
# name: Fabric Build
concurrency: aws-workflow
on: 
  workflow_dispatch:
    inputs:
      install_script_branch:
        type: string
        description: Select the branch to test from linux-agent-install-scripts 
        default: main
      this_repo_branch:
        type: string
        description: Select the branch to use from this repo
        default: main
      terraform_run_destroy:
        type: choice
        options:
        - true
        - false
      fail_first_test:
        type: choice
        options:
        - false
        - true
      fail_second_test:
        type: choice
        options:
        - false
        - true
  push:
    branches:    
      - 'arthur/fix-workflows'
  pull_request:

  schedule:
    # only runs on default branch
    # * is a special character in YAML so you have to quote this string
    - cron:  '15 */12 * * *'

jobs:
  
  Run-Test-Build:
    strategy:
      max-parallel: 30
      fail-fast: false
      matrix:
        test_groups: ['base_defaults']
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      issues: read
      checks: write
    env:
      TF_VAR_PUBLIC_KEY: ${{ secrets.TF_VAR_PUBLIC_KEY }}
      TF_VAR_REGION: "us-west-2"
      TF_VAR_USE_BRANCH_NAME: main

      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} 
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      INSTALL_BRANCH: main
      THIS_REPO_BRANCH: main
      TERRAFORM_RUN_DESTROY: true
      FAIL_FIRST_TEST: false
      FAIL_SECOND_TEST: false
      WORK_DIR: test_code
      CLOUD: aws
      MODULE: aws_machines
      # TF_LOG: DEBUG

    steps:
      # GCP Login
      # This is key generated in GCP console for service account
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
  
      - id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v1'
        with:
          secrets: |-
            TEST_SECRET:projects/896946759488/secrets/TEST_SECRET_GOOGLE

      - name: Set env as secret
        env:
          MY_VAL: '${{ steps.secrets.outputs.TEST_SECRET }}'
        run: |
          import os
          for q in (os.getenv("MY_VAL")):
            print(q,end=" ")
        shell: python
      
      # AWS Login - orig role - has to occur before checkout
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.THUNDERDOME_AWS_ROLE }}
          aws-region: ${{ env.TF_VAR_REGION }}

      - name: Set code repo
        run: |
          if ${{ github.event.inputs.this_repo_branch != '' }}; then
            echo "THIS_REPO_BRANCH=refs/heads/${{ github.event.inputs.this_repo_branch }}" >> $GITHUB_ENV
          elif ${{ github.event_name == 'pull_request' }}; then
            echo "THIS_REPO_BRANCH=refs/heads/${{ github.head_ref }}" >> $GITHUB_ENV
          fi
          
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.THIS_REPO_BRANCH }}

      - name: Set contexts
        run: |
          mkdir context 
          echo '${{ toJSON(github) }}' > context/github_context.json   
          echo '${{ toJSON(matrix) }}' > context/matrix_context.json 
          echo '${{ secrets.PRIVATE_KEY }}' > context/private_key 
   
        working-directory: "${{ env.WORK_DIR }}/python_scripts"

      - name: Print Environment Variables - troubleshooting
        run: |
          env | sort -f

      - name: cleanup
        if: always()
        run: |
          rm -f python_scripts/config.ini

          sed -i 's/${{ secrets.STAGE_DATASTREAM_TOKEN }}/******/g' ./python_scripts/file_outputs/*
          sed -i 's/${{ secrets.STAGE_CUSTOMER_ID }}/******/g' ./python_scripts/file_outputs/*

          sed -i 's/${{ secrets.STAGE_DATASTREAM_TOKEN }}/******/g' ./python_scripts/log_outputs/*
          sed -i 's/${{ secrets.STAGE_CUSTOMER_ID }}/******/g' ./python_scripts/log_outputs/*

        working-directory: "${{ env.WORK_DIR }}"

      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: file_outputs
          path: | 
            /home/runner/work/linux-host-configuration-scripts/linux-host-configuration-scripts/test_code/python_scripts/file_outputs/
            /home/runner/work/linux-host-configuration-scripts/linux-host-configuration-scripts/test_code/python_scripts/log_outputs/
          retention-days: 1

      - name: Fail Check
        if: ${{ env.TEST_RESULT == 'FAIL' }} 
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Fabric tests failed')
